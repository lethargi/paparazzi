<!DOCTYPE flight_plan SYSTEM "flight_plan.dtd">

<flight_plan alt="57" ground_alt="49.03" lat0="60.2948404" lon0="5.2250930" max_dist_from_home="80" name="Rotorcraft Basic (Enac)" security_height="4">
  <header>
	#include "autopilot.h"
    #include "subsystems/ahrs.h"
    #include "subsystems/electrical.h"
    #include "subsystems/datalink/datalink.h"
	#include "modules/manan_test/manan_test.h"
	#include "modules/manan_test/visrl.h"
</header>
  <waypoints>
    <waypoint name="HOME" x="0.0" y="0.0"/>
    <waypoint name="CLIMB" x="0.0" y="2.5"/>
    <waypoint lat="60.2949" lon="5.2251" name="TEMP"/>
    <waypoint lat="60.2948404" lon="5.2250930" name="STDBY"/>
    <waypoint lat="60.2948404" lon="5.2250930" name="GOAL"/>
    <waypoint lat="60.2950532" lon="5.2245440" name="p1"/>
    <waypoint lat="60.2950305" lon="5.2255602" name="p2"/>
    <waypoint lat="60.2947578" lon="5.2255819" name="p3"/>
    <waypoint lat="60.2947389" lon="5.2245349" name="p4"/>
    <waypoint lat="60.295011" lon="5.224595" name="SZ1"/>
    <waypoint lat="60.295008" lon="5.225503" name="SZ2"/>
    <waypoint lat="60.294776" lon="5.225522" name="SZ3"/>
    <waypoint lat="60.294771" lon="5.224586" name="SZ4"/>
    <waypoint lat="60.294771" lon="5.224586" name="BoundaryChecker"/>
    <waypoint height="12." name="CAM" x="-20" y="-50"/>
    <waypoint name="TD" x="5.6" y="-10.9"/>
  </waypoints>
  <sectors>
    <sector color="green" name="MyWorld">
      <corner name="SZ1"/>
      <corner name="SZ2"/>
      <corner name="SZ3"/>
      <corner name="SZ4"/>
    </sector>
  </sectors>
  <blocks>
    <block name="Wait GPS">
      <call fun="NavKillThrottle()"/>
      <while cond="!GpsFixValid()"/>
    </block>
    <block name="Geo init">
      <while cond="LessThan(NavBlockTime(), 10)"/>
      <call fun="NavSetGroundReferenceHere()"/>
    </block>
    <block name="Holding point">
      <call fun="NavKillThrottle()"/>
      <attitude pitch="0" roll="0" throttle="0" until="FALSE" vmode="throttle"/>
    </block>
    <block name="MyTakeoff">
      <call fun="NavResurrect()"/>
      <exception cond="stateGetPositionEnu_f()->z > 2.0" deroute="Standby"/>
      <call fun="NavSetWaypointHere(WP_CLIMB)"/>
      <stay climb="nav_climb_vspeed" vmode="climb" wp="CLIMB"/>
      <deroute block="Standby"/>
    </block>
    <block name="Standby" strip_button="Standby" strip_icon="home.png">
      <stay wp="STDBY"/>
    </block>

    <!--
    <block name="For">
      <call fun="moveWaypointForwards(WP_GOAL,4)"/>
      <go wp="GOAL"/>
      <stay wp="GOAL"/>
    </block>
    <block name="Bac">
      <call fun="moveWaypointBackwards(WP_GOAL,4)"/>
      <go wp="GOAL"/>
      <stay wp="GOAL"/>
    </block>
    <block name="Lef">
      <call fun="moveWaypointLeftwards(WP_GOAL,4)"/>
      <go wp="GOAL"/>
      <stay wp="GOAL"/>
    </block>
    <block name="Rig">
      <call fun="moveWaypointRightwards(WP_GOAL,4)"/>
      <go wp="GOAL"/>
      <stay wp="GOAL"/>
    </block>
    <block name="YawRight">
      <call fun="NavSetWaypointHere(WP_GOAL)"/>
      <call fun="increase_nav_heading_deg(&nav_heading, 45)"/>
      <stay wp="GOAL"/>
    </block>
    <block name="YawLeft">
      <call fun="NavSetWaypointHere(WP_GOAL)"/>
      <call fun="increase_nav_heading_deg(&nav_heading, -45)"/>
      <stay wp="GOAL"/>
    </block>

    <block name="Ballerina">
      <call fun="printheading(&nav_heading)"/>
      <call fun="NavSetWaypointHere(WP_GOAL)"/>
      <for from="0" to="35" var="i">
        <heading alt="WaypointAlt(WP_GOAL)" course="($i+1)*10" until="stage_time>1"/>
        <call fun="cv_task()"/>
        <call fun="update_redsatheading()"/>
        <call fun="printheading(&GetCurHeading())"/>
      </for>
      <stay wp="GOAL"/>
    </block>
    <block name="PrintRedsAtHeading">
      <call fun="print_redsatheading()"/>
      <stay wp="GOAL"/>
    </block>
    <block name="CurRedcount">
      <call fun="cv_task()"/>
      <call fun="print_redsatheading()"/>
      <stay wp="GOAL"/>
    </block>
    <block name="CheckInsideMyWorld">
      <exception cond="InsideMyWorld(GetPosX(),GetPosY())" deroute="PrintRedsAtHeading"/>
      <deroute block="YawLeft"/>
    </block>
    <block name="VisRL">
      <call fun="do_visrl()"/>
      <stay wp="GOAL"/>
    </block>
-->

    <block name="VisRL">
      <call fun="do_visrl()"/>
      <stay wp="GOAL"/>
    </block>

    <block name="SetupEpisode">
        <!-- <go wp="HOME"/> -->
      <stay wp="HOME" until="stage_time>10"/>
      <call fun="nav_set_heading_deg(0)"/>
      <call fun="NavSetWaypointHere(WP_GOAL)"/>
      <call fun="rl_reset_episode()"/>
      <!-- <heading alt="WaypointAlt(WP_GOAL)" course="0" until="stage_time>5"/> -->
      <stay wp="GOAL"/>
    </block>

    <block name="InitRL">
      <call fun="rl_init()"/>
      <stay wp="GOAL" until="stage_time>1"/>
    </block>

    <block name="DoOneStep">
        <while cond="!rl_isterminal">
            <!-- <for var="i" from="1" to="126"> -->
                <!-- <for var="i" from="-128" to="126"> -->
            <call fun="rl_set_cur()"/>
            <call fun="rl_take_cur_action()"/> <!-- check if until here makes it do what i want -->
            <stay wp="GOAL" until="stage_time>1"/>

            <call fun="rl_set_nxt()"/>
            <call fun="rl_update_qtab()"/>
            <call fun="rl_check_terminal()"/>
            <!-- </for> -->
        </while>
        <!-- <exception cond="rl_isterminal" deroute="EndRl"/> -->
      <!-- <deroute block="DoOneStep"/> -->
    </block>

    <block name="EndRl">
      <stay wp="GOAL"/>
    </block>

    <block name="PrintQtab">
      <call fun="rl_print_qtab()"/>
      <stay wp="GOAL"/>
    </block>


    <block name="ReadQtab">
      <call fun="NavSetWaypointHere(WP_TEMP)"/>
      <call fun="rl_read_qtab()"/>
      <stay wp="TEMP"/>
    </block>
    <block name="WriteQtab">
      <call fun="NavSetWaypointHere(WP_TEMP)"/>
      <call fun="rl_write_qtab()"/>
      <stay wp="TEMP"/>
    </block>

    <!-- TEST BLOCKS
    <block name="Test_forloop()">
        <for var="i" from="-129" to="126">
            <call fun="rl_print_test()"/>
        </for>
    </block>
    <block name="Test_rl_set_cur()">
            <call fun="rl_set_cur()"/>
            <stay wp="GOAL"/>
    </block>
    <block name="Test_rl_take_cur_action()">
            <call fun="rl_take_cur_action()"/> 
            <stay wp="GOAL"/>
    </block>
    <block name="Test_rl_set_nxt()">
            <call fun="rl_set_nxt()"/>
            <stay wp="GOAL"/>
    </block>
    <block name="Test_rl_update_qtab()">
            <call fun="rl_update_qtab()"/>
            <stay wp="GOAL"/>
    </block>
    <block name="Test_rl_check_terminal()">
            <call fun="rl_check_terminal()"/>
            <stay wp="GOAL"/>
    </block>
    <block name="Test_rl_get_state()">
            <call fun="get_state()"/>
            <stay wp="GOAL"/>
    </block>
    <block name="Test_rl_pick_action()">
            <call fun="test_pick_action()"/>
            <stay wp="GOAL"/>
    </block>
    <block name="Test_rl_cv_task()">
            <call fun="cv_task()"/>
            <stay wp="GOAL"/>
    </block>
-->


    <block name="land here" strip_button="Land Here" strip_icon="land-right.png">
      <call fun="NavSetWaypointHere(WP_TD)"/>
    </block>
    <block name="land">
      <go wp="TD"/>
    </block>
    <block name="flare">
      <exception cond="NavDetectGround()" deroute="Holding point"/>
      <exception cond="!nav_is_in_flight()" deroute="landed"/>
      <call fun="NavStartDetectGround()"/>
      <stay climb="nav_descend_vspeed" vmode="climb" wp="TD"/>
    </block>
    <block name="landed">
      <attitude pitch="0" roll="0" throttle="0" until="FALSE" vmode="throttle"/>
    </block>
  </blocks>
</flight_plan>
